// Kth Largest Element in an Array : Sort and then use stack : TC -> O(nlogn) : SC -> O(n)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int answer;

        sort(nums.begin(), nums.end());
        stack<int> st;

        for (auto num : nums) {
            st.push(num);
        }

        while (k > 0) {
            answer = st.top();
            st.pop();
            k--;
        }
        return answer;
    }
};

// Min heap approach TC -> O(n log k) : SC -> O(k)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        // Max-heap to store the largest k elements
        priority_queue<int, vector<int>, greater<int>> minHeap;

        for (int num : nums) {
            minHeap.push(num);
            // If the heap size exceeds k, remove the smallest element
            if (minHeap.size() > k) {
                minHeap.pop();
            }
        }
        // The top element of the min-heap is the k-th largest element
        return minHeap.top();
    }
};

// Quick Select Algo : TC -> O(n) worst O(n^2) : SC -> O(1)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        return quickSelect(nums, 0, nums.size() - 1, nums.size() - k);
    }
private:
    int quickSelect(vector<int>& nums, int left, int right, int k) {
        if (left == right) {
            return nums[left];
        }

        int pivotIndex = partition(nums, left, right);
        if (pivotIndex == k) {
            return nums[pivotIndex];
        } else if (pivotIndex < k) {
            return quickSelect(nums, pivotIndex + 1, right, k);
        } else {
            return quickSelect(nums, left, pivotIndex - 1, k);
        }
    }

    int partition(vector<int>& nums, int left, int right) {
        int pivot = nums[right];
        int i = left;
        for (int j = left; j < right; j++) {
            if (nums[j] < pivot) {
                swap(nums[i], nums[j]);
                i++;
            }
        }
        swap(nums[i], nums[right]);
        return i; 
    }
};

