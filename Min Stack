# Min Stack - TC -> O(1) - SC -> O(2N)
class MinStack {
public:
    vector<pair<int, int>> rack;
    
    MinStack() {

    }
    
    void push(int val) {
        if(rack.empty())
            rack.push_back({val, val});
        else
            rack.push_back({val, min(rack.back().second, val)});
    }
    
    void pop() {
        rack.pop_back();
    }
    
    int top() {
        return rack.back().first;
    }
    
    int getMin() {
        return rack.back().second;
    }
};

# Striver approach for sc->O(N) - VERY  Forced code - don't like it
class MinStack {
    stack<long long> st;
    long long mini;
public:
    
    MinStack() {
        while(st.empty() == false) st.pop();
        mini = INT_MAX;
    }
    
    void push(int value) {
        long long val = value;
        if(st.empty()){
            mini = val;
            st.push(val);
        }
        else {
            if(val < mini){
                st.push(2 * val * 1LL - mini);
                mini = val;
            }
            else{
                st.push(val);
            }
        }
    }
    
    void pop() {
        if(st.empty()) return;
        long long el = st.top();
        st.pop();

        if(el < mini){
            mini = 2 * mini - el;
        }
    }
    
    int top() {
        if(st.empty()) return -1;

        long long el = st.top();
        if(el < mini) return mini;
        return el;
    }
    
    int getMin() {
        return mini;
    }
};
