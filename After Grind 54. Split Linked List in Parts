// Split Linked List in Parts : TC -> O(n) : SC -> O(k)
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> result(k, nullptr);

        // Step 1: Count the total number of nodes in the list
        int totalNodes = 0;
        ListNode* curr = head;
        while (curr) {
            totalNodes++;
            curr = curr->next;
        }

        // Step 2: Calculate the base size of each part and number of extra nodes
        int partSize = totalNodes / k;
        int extraNodes = totalNodes % k;

        // Step 3: Split the linked list into parts
        curr = head;
        for (int i = 0; i < k && curr; i++) {
            result[i] = curr; // Set current part's head

            int currentPartSize = partSize + (extraNodes > 0 ? 1 : 0); // Add an extra node to the first 'extranodes' parts 
            extraNodes--;

            // Move the pointer to the end of the current part
            for (int j = 1; j < currentPartSize; j++) {
                curr = curr->next;
            }

            // Disconnect the current part from the rest of the list
            ListNode* nextPart = curr->next;
            curr->next = nullptr;
            curr = nextPart; // Move to the next part
        }

        return result;
    }
};
