// Find All Anagrams in a String : Sliding window : TC -> O(size of larger string)
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> result;
        if(s.size() < p.size()) return result;

        vector<int> p_count(26, 0), s_count(26, 0);

        // Initialize the frequency arrays for the pattern and the first window of the string
        for(int i = 0; i < p.size(); i++){
            p_count[p[i] - 'a']++ ;
            s_count[s[i] - 'a']++ ;
        }

        // Compare initial window with the pattern
        if(p_count == s_count) result.push_back(0);

        // Slide the window over the string
        for(int i = p.size(); i < s.size(); i++){
            s_count[s[i] - 'a']++ ; // Include new character in the window
            s_count[s[i - p.size()] - 'a']-- ; // remove the character that is left out

            // Compare the window with the pattern
            if(p_count == s_count) result.push_back(i - p.size() + 1);
        }

        return result; 
    }
};
