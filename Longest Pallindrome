# Longest Pallindromw - try to understand question don't jumpt to big guns like DP or recursion 
class Solution {
public:
    int longestPalindrome(string s) {
    
        unordered_map<char, int> charCount;
        
        // Count the frequency of each character
        for (char c : s) {
            charCount[c]++;
        }
        
        int length = 0;
        bool oddCountFound = false;
        
        // Calculate the length of the longest palindrome
        for (const auto& pair : charCount) {
            if (pair.second % 2 == 0) {
                length += pair.second;
            } else {
                length += pair.second - 1;
                oddCountFound = true;
            }
        }
        
        // If there was at least one character with an odd count,
        // we can add one to the length (for the center character)
        if (oddCountFound) {
            length += 1;
        }
        
        return length;
        }
};
