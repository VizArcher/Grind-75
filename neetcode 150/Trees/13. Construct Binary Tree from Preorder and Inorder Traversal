//Construct Binary Tree from Preorder and Inorder Traversal : TC -> O(n) : SC -> O(n)
class Solution {
public:
    unordered_map<int, int> inorderIndexMap; // To store the index of each value in inorder array

    // Helper function to recursively build the tree 
    TreeNode* buildTreeHelper(vector<int>& preorder, int preStart, int preEnd,
                            vector<int>& inorder, int inStart, int inEnd) {
        // Base Case: If there are no elements to construct the tree
        if (preStart > preEnd || inStart > inEnd) {
            return nullptr;
        }

        // The first element in preorder is the root node
        int rootValue = preorder[preStart];
        TreeNode* root = new TreeNode(rootValue);

        // Get the index of the root value in the inorder array
        int rootIndex = inorderIndexMap[rootValue];
        
        // Number of nodes in the left subtree
        int leftTreeSize = rootIndex - inStart;

        // Recursively construct the left subtree
        root-> left = buildTreeHelper(preorder, preStart + 1, preStart + leftTreeSize,
                                    inorder, inStart, rootIndex - 1);

        // Recursively construct the right subtree
        root-> right = buildTreeHelper(preorder, preStart + leftTreeSize + 1, preEnd,
                                    inorder, rootIndex + 1, inEnd);
        
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // Build a map to store the index of each element in the inorder traversal
        for (int i = 0; i < inorder.size(); i++) {
            inorderIndexMap[inorder[i]] = i;
        }

        // Call the recursive helper function to build the tree
        return buildTreeHelper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
};
