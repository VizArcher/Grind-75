// Permutations : TC -> O(n x n!) : SC -> O(n)
class Solution {
private: 
    void backtrack(vector<int>& nums, int start, vector<vector<int>>& results) {
        if (start == nums.size()) {
            // A complete permutation is created, so add it to results
            results.push_back(nums);
            return;
        }

        for (int i = start; i < nums.size(); i++) {
            // Swap current element with start
            swap(nums[start], nums[i]);

            // Recure to fill the next position
            backtrack(nums, start + 1, results);

            // Undo the swap (backtrack)
            swap(nums[start], nums[i]);
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> results;
        backtrack(nums, 0, results);
        return results;
    }
};
