// Combination Sum II : TC -> O(2^n) : SC -> O(n)
class Solution {
    void findCombinations(int idx, int target, vector<int>& candidates, vector<int>& current, vector<vector<int>>& result) {
        if (target == 0) {
            result.push_back(current);
            return;
        }

        for (int i = idx; i < candidates.size(); i++) {
            if (i > idx && candidates[i] == candidates[i-1]) continue; // skip the duplicates
            
            if (candidates[i] > target) break; // no need to further proceed

            current.push_back(candidates[i]);
            findCombinations(i + 1, target - candidates[i], candidates, current, result);
            current.pop_back(); // backtrack
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> current;
        sort(candidates.begin(), candidates.end()); // Sort to handle the duplicates easily
        findCombinations(0, target, candidates, current, result);
        return result;
    }
};
