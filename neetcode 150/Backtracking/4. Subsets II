// Subsets II : TC -> O(2^n) : SC -> O(n)
class Solution {
public:
    void backtrack(vector<int>& nums, int start, vector<int>& currentSubset, vector<vector<int>>& results) {
        // Add the current subset to results 
        results.push_back(currentSubset);

        for (int i = start; i < nums.size(); i++) {
            // skip the duplicates at the same recursion level
            if (i > start && nums[i] == nums[i-1]) continue;

            // Include nums[i] in the current subset
            currentSubset.push_back(nums[i]);

            // recurse with the next index
            backtrack(nums, i + 1, currentSubset, results);

            // Backtrack: remove the last element before the next iteration
            currentSubset.pop_back();
        }
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        // sort the list to handle duplicates
        sort(nums.begin(), nums.end());

        // Initialize result current subset
        vector<vector<int>> results;
        vector<int> currentSubset;

        // Start backtracking from index 0
        backtrack(nums, 0, currentSubset, results);

        return results;
    }
};
