// Palindrome Partitioning : TC -> O(2^n x n) : SC -> O(n)
class Solution {
public:
    // Helper function to check if a substring is a palindrome
    bool isPallindrome(const string& s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) return false;
            start++;
            end--;
        }
        return true;
    }

    // Backtracking function to find all palindrome partitions
    void partitionHelper(int start, const string& s, vector<string>& currentPartition, vector<vector<string>>& result) {
        if (start == s.size()) {
            result.push_back(currentPartition);
            return;
        }

        for (int end = start; end < s.size(); end++) {
            if (isPallindrome(s, start, end)) { // Check if the substring is a palindrome
                currentPartition.push_back(s.substr(start, end - start + 1));
                partitionHelper(end + 1, s, currentPartition, result); // recurse to next position
                currentPartition.pop_back(); // backtrack
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> currentPartition;
        partitionHelper(0, s, currentPartition, result);
        return result;
    }
};
