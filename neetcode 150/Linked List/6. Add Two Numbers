// Add Two Numbers : TC -> O(max(m, n)) : SC -> O(max(m, n))
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // Dummy node to help construct the result list
        ListNode* dummy = new ListNode(0);
        ListNode* curr = dummy; // pointer to the current node in the result list/
        int carry = 0; // Initialize carry as 0

        // Traverese both lists until both are null
        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            // Get the values of the current nodes (or 0 if the list has been exhausted)
            int x = (l1 != nullptr) ? l1->val : 0;
            int y = (l2 != nullptr) ? l2->val : 0;

            // Calculate the sum of the current digits and carry
            int sum = x + y + carry;

            // Update the carry for the next iteration
            carry = sum / 10;

            // Create a new node for the current digit (sum % 10) and attach it to the result list
            curr -> next = new ListNode(sum % 10);
            curr = curr -> next;

            // Move to the next nodes in l1 and l2 
            if (l1 != nullptr) l1 = l1->next;
            if (l2 != nullptr) l2 = l2->next;
        }

        // Return the next of dummy as dummy itself is a placeholder
        return dummy->next;
    }
};
