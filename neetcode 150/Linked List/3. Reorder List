// Reorder List : TC -> O(n) : SC -> O(1)
class Solution {
public:
    void reorderList(ListNode* head) {
        if (!head || !head->next || !head->next->next) return; // Edge case

        // Step 1: Find the middle of the list
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast -> next) {
            slow = slow -> next;
            fast = fast -> next -> next;
        }
 
        // Step 2: Reverse the second half of the list
        ListNode* prev, *curr, *next;
        curr = slow;
        next = nullptr;
        prev = nullptr;

        while (curr) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        // Step 3: Merge the two halves
        ListNode* first = head;
        ListNode* second = prev; // prev is now head of the reversed second half
        while (second -> next) { // only loop until second half is fullt merged
            ListNode* temp1 = first->next;
            ListNode* temp2 = second->next;

            first->next = second;
            second->next = temp1;

            first = temp1;
            second = temp2;
        }
    }
};
