// Implement Trie (Prefix Tree) : Time Complexity: Insert: O(L) Search: O(L) StartsWith: O(L) : Space Complexity: O(N * L)
// Node structure for trie 
struct Node {
    // Array to store links to child nodes each index represents a letter
    Node* links[26];

    // Flag indicating if the node marks the end of a word
    bool flag = false;

    // check if the node contains marks the end of a word
    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }

    // Insert a new node with a specific Key (Letter) into the Trie
    void put(char ch, Node* node) {
        links[ch - 'a'] = node;
    }

    // Get the node with specific key (Letter) from the Trie
    Node* get(char ch) {
        return links[ch - 'a'];
    }

    // Set the current node as the end of a word
    void setEnd() {
        flag = true;
    }

    // Check if the current node marks the end of a word
    bool isEnd() {
        return flag;
    }
};

// Trie class
class Trie {
private:
    Node* root;
public:
    // Constructor to initialize the Trie with an empty root node
    Trie() {
        root = new Node();
    }
    
    // Inserts a word into the Trie 
    // Time complexity O(len), where len is the length of the word
    void insert(string word) {
        Node* node = root;
        for (int i = 0; i < word.size(); i++) {
            if (!node -> containsKey(word[i])) {
                // Create a new node for the letter if not present
                node->put(word[i], new Node());
            }
            // Move to the next node
            node = node->get(word[i]);
        }
        // Mark the end of the word
        node->setEnd();
    }
    
    // Returns if the word is in the trie
    bool search(string word) {
        Node* node = root;
        for (int i = 0; i < word.size(); i++) {
            if (!node->containsKey(word[i])) {
                // If a letter is not found, the word is not in the trie
                return false;
            }
            // Move to next node
            node = node->get(word[i]);
        }
        // Check if the last node marks the end of a word
        return node->isEnd();
    }
    
    // Return if there is any word in the trie that stars with the given prefix
    bool startsWith(string prefix) {
        Node* node =  root;
        for (int i = 0; i < prefix.size(); i++) {
            if (!node->containsKey(prefix[i])) {
                // If there is node found, there is node word with the given prefix
                return false;
            }
            // Move to the next node
            node = node -> get(prefix[i]);
        }
        // The prefix is found in the trie
        return true;
    }
};
