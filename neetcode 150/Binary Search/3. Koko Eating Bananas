// Koko Eating Bananas : TC -> O(nlogn) : SC -> O(1)
class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        // Binary search for the minimum speed
        int left = 1, right = *max_element(piles.begin(), piles.end());

        while (left < right) {
            int mid = left + (right - left) / 2;
            int hoursSpent = 0;

            // Calculate the total hours required for this speed (mid) 
            for (int pile : piles) {
                // Use ceiling division: (pile + mid - 1) / mid is equivalent to ceil(pile/mid)
                hoursSpent += (pile + mid - 1) / mid;
            }

            // If the hours spent are within the limit, try slower speed
            if (hoursSpent <= h) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left; // This will be the minimum k
    }
};
