// Find Minimum in Rotated Sorted Array : Brute Force : TC -> O(n) : SC -> O(1)
class Solution {
public:
    int findMin(vector<int>& nums) {
        int mini = INT_MAX;
        
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] <= mini) {
                mini = nums[i];
            }
        }

        return mini;
    }
};

      
      // Binary Search : TC -> O(logn) : SC -> O(1)
class Solution {
public:
    int findMin(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            // If the middle element is greater than the rightmost element,
            // the minimum must be in the right half
            if (nums[mid] > nums[right]) {
                left = mid + 1;
            }
            // Otherwise, the minimum is in the left half (including mid)
            else {
                right = mid;
            }
        }
        // Now left most point is minimum
        return nums[left];
    }
};
