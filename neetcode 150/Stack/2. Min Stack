// Min Stack : TC -> O(1) : SC -> O(n) 
class MinStack {
public:
    // Two stacks: one for the regular stack, and one for tracking the minimum.
    stack<int> mainStack;
    stack<int> minStack;

    // Constructor for the MinStack
    MinStack() {}
    
    // Push the element x onto the stack
    void push(int val) {
        mainStack.push(val);

        // If the minStack is empty or the current element is smaller than or equal to the top of minstacl,
        // push the current element onto minStack as well.
        if (minStack.empty() || val <= minStack.top()) {
            minStack.push(val);
        }
    }
    
    // Remove the element from the top of the stack
    void pop() {
        // If the top of the mainStack matches the top of the minStack, pop from minStack also
        if (mainStack.top() == minStack.top()) {
            minStack.pop();
        }
        mainStack.pop();
    }

    // Get the top element of the stack
    int top() {
        return mainStack.top();
    }
    
    // Retrieve the minimum element in the stack
    int getMin() {
        return minStack.top();
    }
};
