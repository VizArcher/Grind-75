// Car Fleet : TC -> O(nlogn) : SC -> O(n)
class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        int n = position.size();
        if (n == 0) return 0;

        // Create a vector of pairs where each pair contains (position, time to reach target)
        vector<pair<int, double>> cars;
        for (int i = 0; i < n; i++) {
            double timeToReach = (double)(target - position[i]) / speed[i];
            cars.push_back({position[i], timeToReach});
        }

        // Sort cars by position in decreasing order
        sort(cars.begin(), cars.end(), greater<pair<int, double>>());

        int fleets = 0;
        double maxTime = 0.0;

        // Traverse the cars and check for fleets
        for (int i = 0; i < n; i++) {
            if (cars[i].second > maxTime) {
                // If this car takse longer time, it forms a new flee
                fleets++;
                maxTime = cars[i].second;
            }
        }

        return fleets;
    }
};
