// Longest Substring Without Repeating Characters : TC -> O(n) : SC -> O(min(m, n)) where m is the size of hashmap
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int maxLen = 0;
        int left = 0;
        unordered_map<char, int> charCount;

        for(int right = 0; right < s.size(); right++) {
            charCount[s[right]]++;

            // If there are any duplicates, shrink the window
            while (charCount[s[right]] > 1) {
                charCount[s[left]]--;
                left++;
            }

            // Calculate the current window length and update maxLen
            int currentLen = right - left + 1;
            maxLen = max(maxLen, currentLen);
        }

        return maxLen;
    }
};
