// Brute approach (Mine) : TC -> O(n*k) : SC -> O(n) : TLE
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        int left = 0; 
        int maxNum = INT_MIN;

        for (int right = k - 1; right < nums.size(); right++) {
            maxNum = INT_MIN; // Reset the maximum for each new window

            // Iterate over the sliding window of size `k`
            for (int i = left; i <= right; i++) {
                maxNum = max(maxNum, nums[i]);
            }

            ans.push_back(maxNum); // Store the maximum for the current window
            left++; // Move the window one step to the right
        }
        return ans;
    }
};

// Deque : TC -> O(n) : SC -> O(k)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq; // Deque to store indices
        vector<int> ans; // Result to store maximums of each window

        for (int i = 0; i < nums.size(); i++) {
            // Remove the indices from the front if they are out of the window 
            if (!dq.empty() && dq.front() < i - k + 1) {
                dq.pop_front();
            }

            // Remove elements from the back that are smaller than the current element
            while (!dq.empty() && nums[dq.back()] <= nums[i]) {
                dq.pop_back();
            }

            // Add the current element index to the deque
            dq.push_back(i);

            // Start recording the maximum once the first full window is reached 
            if (i >= k - 1) {
                ans.push_back(nums[dq.front()]); // The front of deque is maximum
            }
        }
        return ans;
    }
};
