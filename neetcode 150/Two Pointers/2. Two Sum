// Two Sum II - Array is sorted : Brute Force : TC -> O(n^2) : SC -> O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int n = numbers.size();
        vector<int> result;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (numbers[i] + numbers[j] == target) {
                    result.push_back(i+1);
                    result.push_back(j+1);
                    return result;
                }
            }
        }

        return result;
    }
};

// Two pointer solution : TC -> O(n) : SC -> O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> result;
        int left = 0;
        int right = numbers.size() - 1;

        while (left < right) {
            int sum = numbers[left] + numbers[right];
            
            if (sum == target) {
                result.push_back(left + 1);
                result.push_back(right + 1);
                break;
            }

            else if (sum < target) {
                left++;
            }

            else { 
                right--;
            }
        }
        return result;
    }
};
