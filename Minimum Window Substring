// Minimum Window Substring : hash map and sliding window : TC -> O(2n) + O(n) : sc -> O(256)
class Solution {
public:
    string minWindow(string s, string t) {
        if(s.empty() || t.empty()) return "";

        // Array to keep the count of characters in t
        int hash[256] = {0};
        for(char c : t){
            hash[c]++;
        }

        int left = 0, right = 0;
        int required = t.size();
        int minLen = INT_MAX;
        int start = 0;

        while(right < s.size()){
            // If character in s is part of t, decrease the count
            if(hash[s[right]] > 0) {
                required--;
            }
            // Decrease count in the hash array
            hash[s[right]]--;
            right++;

            // When we have a valid window
            while(required == 0){
                // Update
                if(right - left < minLen){
                    minLen = right - left;
                    start = left;
                }

                // Increase the count in the hash array for the left character
                hash[s[left]]++;
                // If character at left was part of t, increase the required count 
                if(hash[s[left]] > 0){
                    required++;
                }
                left++;
            }
        }

        // If minLen is not updated, return an empty string 
        return (minLen == INT_MAX) ? "" : s.substr(start, minLen);
    }
};
