// Subarray Sum Equals K : Brute Force : TC -> O(n^2) : SC -> O(1)
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int result = 0; 

        for (int i = 0; i < nums.size(); i++) {
            int sum = 0;
            for (int j = i; j < nums.size(); j++) {
                sum += nums[j];
                if (sum == k) {
                    result++;
                }
            }
        }
        return result;
    }
};

// HashMap : TC -> O(n) : SC -> O(k)
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> sumFrequency;
        sumFrequency[0] = 1; // Initialize to handle the case where a subarray itself equals k
        int currentSum = 0;
        int result = 0;

        for (int num : nums) {
            currentSum += num;

            // If currentSum - k exists in the map, it means there's a subarray ending here with sum = k
            if (sumFrequency.find(currentSum - k) != sumFrequency.end()) {
                result += sumFrequency[currentSum - k];
            }

            // Update the frequency of the current sum in the map
            sumFrequency[currentSum]++;
        }
        return result;
    }
};
