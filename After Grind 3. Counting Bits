// Counting Bits : My soln : TC -> O(n^2) : SC -> O(n)
class Solution {
public:
    vector<int> countBits(int n) {
    vector<int> res;
    int count = 0;

    while(n >= 0) {
        int num = n;
        string binary = "";
        while (num > 0) {
                binary = (num % 2 == 0 ? "0" : "1") + binary;
                num = num / 2;
            }

        for(int i = 0; i < binary.size(); i++){
            if(binary[i] == '1')
                count++;
        }

        res.push_back(count);
        count = 0;
        n--;
        }
        reverse(res.begin(), res.end());
        return res;
    }
};

// Using Bit wise operators : DP : TC -> O(n) : SC -> O(n)
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> res(n + 1, 0);

        for (int i = 1; i <= n; ++i) {
            res[i] = res[i >> 1] + (i & 1);
        }

        return res;
    }
};
