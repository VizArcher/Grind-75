// max heap : TC -> O(klogn) : SC -> O(k)
class Solution {
public:
    long long maxKelements(vector<int>& nums, int k) {
        // Max-heap using a priority queue
        priority_queue<int> maxHeap(nums.begin(), nums.end());
        long long score = 0;

        // Perform k operations
        for (int i = 0; i < k; i++) {
            // Get the largest element
            int top = maxHeap.top();
            maxHeap.pop();

            // Add it to the score
            score += top;

            // Replace it with its half rounded up and push back to the heap
            int newValue = ceil(top / 3.0);
            maxHeap.push(newValue);
        }

        return score;
    }
};
