// Task Scheduler : TC -> O(n)
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> freq(26, 0);

        // Count the frequency of each task
        for(char task : tasks){
            freq[task - 'A']++;
        }

        // Sort frequencies in descending
        sort(freq.begin(), freq.end(), greater<int>());

        // Max Frequency 
        int maxFreq = freq[0];
        int idleSlots = (maxFreq - 1) * n;

        // Fill the idle slots with other tasks
        for(int i = 1; i < 26; i++){
            idleSlots -= min(freq[i], maxFreq - 1);
        }

        // If idle slots become negative, it means we have enough tasks to fill all gaps
        idleSlots = max(0, idleSlots);

        return tasks.size() + idleSlots;
    }
};

