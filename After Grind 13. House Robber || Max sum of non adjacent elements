// House Robber : Recursion : TC -> O(2^n) : TLE
class Solution {
private:
    int f(int ind, vector<int> &nums) {
        if (ind == 0) return nums[ind];
        if (ind < 0) return 0;

        int pick = nums[ind] + f(ind - 2, nums);
        int notPick = 0 + f(ind - 1, nums);

        return max(pick, notPick);
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        return f(n - 1, nums);
    }
};

// Memorization : TC -> O(n) : SC -> O(n) + O(n)
class Solution {
private:
    int f(int ind, vector<int> &nums, vector<int> &dp) {
        if (ind == 0) return nums[ind];
        if (ind < 0) return 0;
        if(dp[ind] != -1) return dp[ind];

        int pick = nums[ind] + f(ind - 2, nums, dp);
        int notPick = 0 + f(ind - 1, nums, dp);

        return dp[ind] = max(pick, notPick);
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, -1);
        return f(n - 1, nums, dp);
    }
};

// Tabulation : Bottom up approach : TC -> O(n) : SC -> O(n)
class Solution {
private:
    int solveUtil(int n, vector<int> &arr, vector<int> &dp) {
        // Base case: if there are no elements in the array, return 0
        dp[0] = arr[0];

        // Iterate through the elements of the array
        for (int i = 1; i < n; i++) {
            // Calculate the maximum value by either picking the current element
            // or not picking it (i.e., taking the maximum of dp[i - 2] + arr[i] and dp[i - 1])
            int pick = arr[i];
            if (i > 1) 
                pick += dp[i - 2];
            int nonPick = dp[i - 1];

            // store the maximum value in the dp array
            dp[i] = max(pick, nonPick);
        }
        // The last element of the dp array will contain the maximum value
        return dp[n - 1];
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 0);
        return solveUtil(n, nums, dp);
    }
};

// Tabulation with space optimization : TC -> O(n) : SC -> O(1)
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        int prev = nums[0]; // Initializa the maximum sum ending at the previous element
        int prev2 = 0; // Initialize the maximum sum ending two elements ago

        for(int i = 1; i < n; i++) {
            int pick = nums[i]; // Maximum sum if we pick the current element
            if (i > 1)
                pick += prev2; // Add the maximum sum two elements ago
            
            int nonPick = 0 + prev; // Maximum sum if we don't pick the current element

            int cur_i = max(pick, nonPick); // Maximum sum ending at the current element
            prev2 = prev; // Update the maximum sum two elements ago
            prev = cur_i; // Update the maximum sum ending at the previous element
        }

        return prev; // Return the maximum sum
    }
};
