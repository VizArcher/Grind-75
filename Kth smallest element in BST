// Kth smallest element in BST : Brute force - Do DFS or BFS to get all element and store them in a vector, then sort the vector and get kth element in vector : TC -> O(n) + O(nlogn) : sc -> O(n)
// below one is optimial : Inorder traversal traverse BST in a sorted manner and use counter : TC-> O(n) SC -> o(1)
class Solution {
private:
    void inorder(TreeNode* node, int& counter, int k, int& kSmallest){
        if(!node || counter >= k) return;
        
        // Traverse left subtree
        inorder(node->left, counter, k, kSmallest);

        // Increment counter after visiting left subtree
        counter++;

        // Check if current node is the Kth smallest
        if(counter == k){
            kSmallest = node->val;
            return;
        }

        // Traverse right subtree if Kth smalles is not found yet
        inorder(node->right, counter, k, kSmallest);
    }
public:
    int kthSmallest(TreeNode* root, int k) {
        int kSmallest = INT_MIN;
        // Counter to track visited nodes
        int counter = 0;

        // Find Kth smallest element
        // (perform  inorder traversal)
        inorder(root, counter, k, kSmallest);
        return kSmallest;
    }
};
