// Missing Number : TC -> O(n) : SC -> O(n)
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        vector<int> number(nums.size() + 1, 0);

        for(int i = 0; i < nums.size(); i++)
            number[nums[i]]++;

        for(int i = 0; i < number.size(); i++){
            if(number[i] == 0){
                return i;
            }
        }
        return -1;
    
};
// approach 2 : Same as above TC and SC
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        vector<bool> seen(n + 1, false);

        for (int i = 0; i < n; i++) {
            seen[nums[i]] = true;
        }

        for (int i = 0; i <= n; i++) {
            if (!seen[i]) {
                return i;
            }
        }

        return -1; 
    }
};

// approach 3: Arithmetic sum : TC -> O(n) : SC -> O(1)
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int totalSum = n * (n + 1) / 2;
        int arraySum = 0;
        
        for (int num : nums) {
            arraySum += num;
        }
        
        return totalSum - arraySum;
    }
};
