// Longest increasing subsequence : Using take and not take recursion : TC -> O(2^n) : SC -> O(n) : TLE
class Solution {
private:
    int f(int ind, int prev_ind, vector<int> arr, int n) {
        if (ind == n) return 0;
        
        int len = 0 + f(ind + 1, prev_ind, arr, n); // Not Take
        if(prev_ind == -1 || arr[ind] > arr[prev_ind]) {
            len = max(len, 1 + f(ind + 1, ind, arr, n)); // Take
        }

        return len;
    }
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        return f(0, -1, nums, n);
    }
};

// Memorization : TC -> O(n x n) : SC -> O(n x n) + O(n) : TLE
class Solution {
private:
    int f(int ind, int prev_ind, vector<int> arr, int n, 
        vector<vector<int>>& dp) {
        if (ind == n) return 0;
        if (dp[ind][prev_ind + 1] != -1) return dp[ind][prev_ind + 1];
        
        int len = 0 + f(ind + 1, prev_ind, arr, n, dp); // Not Take
        if(prev_ind == -1 || arr[ind] > arr[prev_ind]) {
            len = max(len, 1 + f(ind + 1, ind, arr, n, dp)); // Take
        }

        return dp[ind][prev_ind + 1] = len;
    }
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n+1, -1));
        return f(0, -1, nums, n, dp);
    }
};

// Tabulation : TC -> O(n^2) : SC -> O(2n)
class Solution {
public:
    int lengthOfLIS(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int prev_ind = ind - 1; prev_ind >= -1; prev_ind--) {
                int len = 0 + dp[ind+1][prev_ind+1];
                if (prev_ind == -1 || arr[ind] > arr[prev_ind]) {
                    len = max(len, 1 + dp[ind+1][ind+1]);
                }
                dp[ind][prev_ind+1] = len;
            }
        }
        return dp[0][-1+1];
    }
};

// Space optimization : TC -> O(n^2) : SC -> O(1)
class Solution {
public:
    int lengthOfLIS(vector<int>& arr) {
        int n = arr.size();
        vector<int> next(n+1, 0), cur(n+1, 0);
        for (int ind = n - 1; ind >= 0; ind--) {
            for (int prev_ind = ind - 1; prev_ind >= -1; prev_ind--) {
                int len = 0 + next[prev_ind+1];
                if (prev_ind == -1 || arr[ind] > arr[prev_ind]) {
                    len = max(len, 1 + next[ind+1]);
                }
                cur[prev_ind+1] = len;
            }
            next = cur;
        }
        return next[-1+1];
    }
};

// Another Tabulation Approach : TC -> O(n^2) : SC -> O(n)
class Solution {
public:
    int lengthOfLIS(vector<int>& arr) {
        int n = arr.size();
        int maxi = 1;
        vector<int> dp(n, 1);
        for(int i = 0; i < n; i++) {
            for (int prev = 0; prev < i; prev++) {
                if (arr[prev] < arr[i]) {
                    dp[i] = max(dp[i], 1 + dp[prev]);
                }
            }
            maxi = max(maxi, dp[i]);
        }
        return maxi; 
    }
};
