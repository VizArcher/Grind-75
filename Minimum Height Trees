// Minimum Height Trees : from leaves to center approach : TC -> O(n)
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0};
        if (n == 2) return {0, 1};

        vector<vector<int>> adj(n);
        vector<int> degree(n, 0); 

        // Build the graph and degree of each node
        for(auto& edge: edges){
            int u = edge[0];
            int v = edge[1];

            adj[u].push_back(v);
            adj[v].push_back(u);

            degree[u]++;
            degree[v]++;
        }

        queue<int> q;
        // Initialize the first layers of leaves
        for(int i = 0; i < n; i++){
            if(degree[i] == 1){
                q.push(i);
            }
        }

        // Trim the leaves until reaching the centroids
        while(n > 2){
            int leavesCount = q.size();
            n -= leavesCount;
            for(int i = 0; i < leavesCount; i++){
                int leaf = q.front();
                q.pop();
                for(int neighbor: adj[leaf]){
                    if(--degree[neighbor] == 1){
                        q.push(neighbor); 
                    }
                }
            }
        }

        vector<int> result;
        while(!q.empty()){
            result.push_back(q.front());
            q.pop();
        }

        return result; 
    }
};
