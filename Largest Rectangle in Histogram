// Largest Rectangle in Histogram : Brute Force : TC -> O(N x N) : SC -> O(1)
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int maxArea = 0;
        for(int i = 0; i < n; i++){
            int minHeight = INT_MAX;
            for(int j = i; j < n; j++){
                minHeight = min(minHeight, heights[j]);
                maxArea = max(maxArea, minHeight * (j - i + 1));
            }
        }
        return maxArea;
    }
};

// Using concept of next small element (nse) and previous small element (pse) : TC -> O(N) : SC -> O(3N)
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        int leftsmall[n], rightsmall[n];
        for(int i = 0; i < n; i++){
            while(!st.empty() && heights[st.top()] >= heights[i]){
                st.pop();
            }
            if(st.empty())
                leftsmall[i] = 0;
            else
                leftsmall[i] = st.top() + 1;
            st.push(i);
        }
        // Clear the stack to be re-used
        while(!st.empty())
            st.pop();

        for(int i = n - 1; i >= 0; i--){
            while(!st.empty() && heights[st.top()] >= heights[i])
                st.pop();
            
            if(st.empty())
                rightsmall[i] = n - 1;
            else
                rightsmall[i] = st.top() - 1;
            
            st.push(i);
        }
        int maxArea = 0;
        for(int i = 0; i < n; i++){
            maxArea = max(maxArea, heights[i] * (rightsmall[i] - leftsmall[i] + 1));
        }
        return maxArea;
    }
};

// using only one stack : TC -> O(N) + O(N) : SC -> O(1)
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        int maxA = 0;
        for(int i = 0; i <= n; i++){
            while(!st.empty() && (i == n || heights[st.top()] >= heights[i])){
                int height = heights[st.top()];
                st.pop();
                int width;
                if(st.empty())
                    width = i;
                else
                    width = i - st.top() - 1;
                maxA  = max(maxA, width * height);
            }
            st.push(i);
        }
        return maxA;
    }
};
