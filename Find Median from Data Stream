// Find Median from Data Stream : TC -> O(logn) O(1) 
class MedianFinder {
private:
    priority_queue<int> maxHeap; // Max-heap for left half
    priority_queue<int, vector<int>, greater<int>> minHeap; // Min-heap for the right half
public:
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(maxHeap.empty() || num <= maxHeap.top()){
            maxHeap.push(num);
        }
        else{
            minHeap.push(num);
        }

        // Balance the heaps 
        if(maxHeap.size() > minHeap.size() + 1){
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
        else if(minHeap.size() > maxHeap.size()){
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }
    
    double findMedian() {
        if(maxHeap.size() == minHeap.size()){
            return (maxHeap.top() + minHeap.top()) / 2.0;
        }else{
            return maxHeap.top();
        }
    }
};
