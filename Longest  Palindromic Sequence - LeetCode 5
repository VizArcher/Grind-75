// Longest Palindromic Substring : My Solution - TimeLimit Exceeded : TC -> O(n^2)
#include <iostream>
#include <unordered_map>
#include <vector>
#include <algorithm>

class Solution {
public:
    string longestPalindrome(std::string s) {
        unordered_map<int, std::string> len_to_subset;
        int maxLen = 0;
        string subset;

        for (int i = 0; i < s.size(); i++) {
            for (int j = i; j < s.size(); j++) {
                string candidate = s.substr(i, j - i + 1);
                string rev_candidate = candidate;
                reverse(rev_candidate.begin(), rev_candidate.end());
                if (candidate == rev_candidate) {
                    int currentLength = candidate.size();
                    len_to_subset[currentLength] = candidate;
                    maxLen = max(currentLength, maxLen);
                }
            }
        }

        if (len_to_subset.empty()) {
            return " ";
        } else {
            return len_to_subset[maxLen];
        }
    }
};

// DP 
class Solution {
public:
    std::string longestPalindrome(std::string s) {
        if (s.length() <= 1) {
            return s;
        }
        
        int max_len = 1;
        int start = 0;
        int end = 0;
        std::vector<std::vector<bool>> dp(s.length(), std::vector<bool>(s.length(), false));
        
        for (int i = 0; i < s.length(); ++i) {
            dp[i][i] = true;
            for (int j = 0; j < i; ++j) {
                if (s[j] == s[i] && (i - j <= 2 || dp[j + 1][i - 1])) {
                    dp[j][i] = true;
                    if (i - j + 1 > max_len) {
                        max_len = i - j + 1;
                        start = j;
                        end = i;
                    }
                }
            }
        }
        
        return s.substr(start, end - start + 1);
    }
};
