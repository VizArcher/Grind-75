// Binary Tree Right Side View : we use level order traversal (i.e reverse postorder)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private: 
    void RevPostOrderTraversal(TreeNode* root, int level, vector<int> &result){
        if(root == NULL)
            return;
        
        if(level == result.size())
            result.push_back(root -> val);
        
        RevPostOrderTraversal(root -> right, level + 1, result);
        RevPostOrderTraversal(root -> left, level + 1, result);
    }
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int>result;
        RevPostOrderTraversal(root, 0, result); 
        return result;    
    }
};

// BFS Traversal 
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;

        if(root == NULL)
            return ans;
        
        queue<TreeNode*> q;

        q.push(root);

        while(!empty(q)){
            int queue_size = q.size();

            for(int i = 0; i < queue_size; i++){
                TreeNode* x = q.front();
            
                if(i == queue_size - 1)
                    ans.push_back(x->val);
                
                if(x -> left != NULL)
                    q.push(x -> left);
                
                if(x -> right != NULL)
                    q.push(x -> right);
                
                q.pop();
            }
        }
        return ans;
    }
};
