# My solution 
class Solution {
public:
    bool isValid(string s) {
        int n = s.size();
        stack<char>st ;

        bool ans = true;

        for(int i = 0; i < n; i++){
            if(s[i]=='{' || s[i]=='[' || s[i]=='('){
                st.push(s[i]);
            }
            else if(s[i] == ')'){
                if(st.top() == '(' && !st.empty()){
                    st.pop();
                }
                else{
                    ans = false; 
                    break;
                }
            }
            else if(s[i] == '}'){
                if(st.top() == '{' && !st.empty()){
                    st.pop();
                }
                else{
                    ans = false; 
                    break;
                }
            }
            else if(s[i] == ']'){
                if(st.top() == '[' && !st.empty()){
                    st.pop();
                }
                else{
                    ans = false; 
                    break;
                }
            }
        }
        if(!st.empty())
            return false;
        
        return ans;
    }
};

# Correct solution
#include <stack>
#include <string>

using namespace std;

class Solution {
public:
    bool isValid(string s) {
        int n = s.size();
        stack<char> st;

        for (int i = 0; i < n; i++) {
            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {
                st.push(s[i]);
            } else {
                if (st.empty()) {
                    return false; // There's no corresponding opening bracket
                }
                char topChar = st.top();
                st.pop();
                if ((s[i] == ')' && topChar != '(') ||
                    (s[i] == ']' && topChar != '[') ||
                    (s[i] == '}' && topChar != '{')) {
                    return false; // Mismatched brackets
                }
            }
        }
        return st.empty(); // Check if there are leftover opening brackets
    }
};
