// maximum product subarray : TC -> O(n) : SC -> (1) 
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        double pre = 1, suff = 1;
        double ans = INT_MIN;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (pre == 0) pre = 1;
            if (suff == 0) suff = 1;

            pre = pre * nums[i];
            suff = suff * nums[n-i-1];
            ans = max(ans, max(pre, suff));
        }
        return ans;
    }
};

// Modified kadane's algo 
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxi = INT_MIN;
        int prod=1;

        for(int i=0;i<nums.size();i++)
        {
          prod*=nums[i];
          maxi=max(prod,maxi);
          if(prod==0)
           prod=1;
        }
        prod=1;
        for(int i=nums.size()-1;i>=0;i--)
        {
          prod*=nums[i];

          maxi=max(prod,maxi);
          if(prod==0)
           prod=1;
        }
        return maxi;
    }
};
