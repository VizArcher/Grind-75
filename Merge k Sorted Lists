// Merge k Sorted Lists : There are many solutions for this - 
// naive soln of creating an array and put all the values into it and sort it, then make a linked list out of it's elements - 
// Other is using trick of merging two list at a time and this one uses min heap
// TC -> k x logk + N x k x logk ~ approx square into log : SC -> O(k)
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<pair<int, ListNode*>,
        vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> pq;
        for(int i = 0; i < lists.size(); i++){
            if(lists[i]){
                pq.push({lists[i]->val, lists[i]});
            }
        }

        ListNode* dummyNode = new ListNode(-1);
        ListNode* temp = dummyNode;
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            if(it.second->next)
                pq.push({it.second->next->val, it.second->next});
            temp->next = it.second;
            temp = temp->next;
        }
        return dummyNode->next;
    }
};
