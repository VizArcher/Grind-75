// Basic calculator : TC -> O(n) : SC -> O(n)
class Solution {
public:
    int calculate(string s) {
        stack<int> st;
        int result = 0;
        int number = 0;
        int sign = 1; // 1 means positive, -1 means negative

        for(int i = 0; i < s.length(); i++){
            char ch = s[i];

            if(isdigit(ch)){
                number = 10 * number + (ch - '0');
            }else if(ch == '+'){
                result += sign * number;
                number = 0;
                sign = 1;
            }else if(ch == '-'){
                result += sign * number;
                number = 0;
                sign = -1;
            }else if(ch == '('){
                // push the result and sign onto the stack, for later
                st.push(result);
                st.push(sign);
                // Reset result and sign for the new sub-expression
                result = 0;
                sign = 1;
            }else if(ch == ')'){
                result += sign * number;
                number = 0;
                // pop the sign and result from the stack and combine with the current result
                result *= st.top(); st.pop(); // this is the sign
                result += st.top(); st.pop(); // this is the previous result
            }
        }
        if(number != 0){
            result += sign * number;
        }
        return result;
    }
};
