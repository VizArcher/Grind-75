// Maximum Width of Binary Tree : TC -> O(n) : SC -> O(n) : Use BFS and keep track of elements at each level
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if (!root) return 0;

        int maxWidth = 0;
        queue<pair<TreeNode*, unsigned long long>> q; // pair of node and it's index
        q.push({root, 0});

        while(!q.empty()) {
            int size = q.size();
            unsigned long long minIndex = q.front().second; // minimum index at this level
            unsigned long long first, last;

            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front().first;
                unsigned long long index = q.front().second - minIndex; // Normalized index
                q.pop();
    
                if (i == 0) first = index;
                if (i == size - 1) last = index;

                if (node->left) q.push({node->left, 2 * index + 1});
                if (node->right) q.push({node->right, 2 * index + 2});
            }

            maxWidth = max(maxWidth, int(last - first + 1));
        } 

        return maxWidth;
    }
};
