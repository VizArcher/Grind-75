// Find the Longest Substring Containing Vowels in Even Counts : Bit Masking : TC -> O(n) : SC -> O(1)
class Solution {
public:
    int findTheLongestSubstring(string s) {
        // Dictionary to store the first occurence of each bitmask
        unordered_map<int, int> seen;
        // Initial mask to 0 and set it at index -1 for the base case
        seen[0] = -1;

        int mask = 0; // This will represent the current vowel state
        int maxLength = 0; 

        for (int i = 0; i < s.length(); i++) {
            char ch = s[i];

            // Update the mask for each vowel
            if (ch == 'a') mask ^= (1 << 0);
            else if (ch == 'e') mask ^= (1 << 1);
            else if (ch == 'i') mask ^= (1 << 2);
            else if (ch == 'o') mask ^= (1 << 3);
            else if (ch == 'u') mask ^= (1 << 4);

            // If this mask has been seen before, calculate the length
            if (seen.find(mask) != seen.end()) {
                maxLength = max(maxLength, i - seen[mask]);
            } else {
                // otherwise, store this mask with current index
                seen[mask] = i;
            }
        }
        
        return maxLength;
    }
};
