// Decode Ways : Use DP : TC -> O(n) : SC -> O(n)
class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();
        if (n == 0 || s[0] == '0') return 0;

        // dp[i] represents the number of ways to decode the string up to the ith position
        vector<int> dp(n+1, 0);

        // Base Cases
        dp[0] = 1; // There's 1 way to decode an empty string.
        dp[1] = s[0] != '0' ? 1 : 0; // There's 1 way to decode a non-zero single digit

        for (int i = 2; i <= n; i++) {
            // Check the last one digit (from s[i-1] tp s[i-1])
            int oneDigit = stoi(s.substr(i-1,1));
            if (oneDigit >= 1 && oneDigit <= 9) {
                dp[i] += dp[i-1]; // Add the number of ways up to i-1
            }

            // Check the last two digits (from s[i-2] to s[i-1])
            int twoDigits = stoi(s.substr(i-2,2));
            if (twoDigits >= 10 &&  twoDigits <= 26) {
                dp[i] += dp[i - 2]; // Add the number of ways up to i-2
            }
        }

        // the result is stored in dp[n]
        return dp[n];
    }
};
