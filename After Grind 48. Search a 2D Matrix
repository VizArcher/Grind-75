// Search a 2D Matrix : Brute Force : TC -> O(n^2) : SC -> O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == target) {
                    return true;
                }
            }
        }
        return false;
    }
};

// Binary search : TC -> O(logn) : SC -> O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        int start = 0;
        int end = rows * cols - 1;

        while (start <= end) {
            int middle = start + (end - start) / 2;
            int element = matrix[middle / cols][middle % cols];

            if (target == element) {
                return true;
            } else if (target < element) {
                end = middle - 1;
            } else {
                start = middle + 1;  // Update `start` here instead of `middle`
            }
        }

        return false;
    }
};
