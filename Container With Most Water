// Container With Most Water : My Solution Brute : TC -> O(N^2) : SC -> (N^2)
class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));

        int maxArea = 0;

        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                int minHeight = min(height[i], height[j]);
                int width = j - i;
                dp[i][j] = minHeight * width;
                maxArea = max(maxArea, dp[i][j]);
            }
        }
        return maxArea;
    }
};

// Optimized Two pointer solution : TC -> O(N) : SC -> O(1)
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxArea = 0;
        int left = 0;
        int right = height.size() - 1;

        while (left < right) {
            // Calculate the area formed between the two pointers
            int width = right - left;
            int h = min(height[left], height[right]);
            int currentArea = width * h;
            maxArea = max(maxArea, currentArea);

            // Move the pointers inward to try and find a larger area
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }
};
