// Path Sum -II : TC -> O(n) : SC -> O(n)
class Solution {
public:
    void findPaths(TreeNode* root, int targetSum, vector<int>& currentPath, vector<vector<int>>& allPaths) {
        if (!root) return;

        // Add current node's value to the path
        currentPath.push_back(root->val);

        // Check if it's a leaf node and the path sum equals the targetSum
        if (!root->left && !root->right && root->val == targetSum) {
            allPaths.push_back(currentPath);
        } else {
            // Continue searching in the left and right subtrees
            findPaths(root->left, targetSum - root->val, currentPath, allPaths);
            findPaths(root->right, targetSum - root->val, currentPath, allPaths);
        }

        // Backtrack: remove the current node's value before returning to the previous level
        currentPath.pop_back();
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> allPaths;
        vector<int> currentPath;
        findPaths(root, targetSum, currentPath, allPaths);
        return allPaths;
    }
};
