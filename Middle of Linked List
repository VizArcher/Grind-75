# Middle of Linked List - Brute force solution
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        // First pass to count the number of nodes
        int count = 0;
        ListNode* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        
        // Calculate the middle index
        int mid = count / 2;

        // Second pass to find the middle node
        temp = head;
        for (int i = 0; i < mid; i++) {
            temp = temp->next;
        }
        
        return temp;
    }
};

# optimal solution - fast and slow pointer TC -> O(N)
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;

        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;
    }
};
