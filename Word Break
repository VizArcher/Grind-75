// Word Break - My Failed approach
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        string word;

        for(int i = 0; i < s.size(); i++){
            word += s[i];
            for(int j = 0; j < wordDict.size(); j++){
                if(word.compare(wordDict[j]) == 0){
                    wordDict.erase(wordDict.begin());
                    word.clear();
                }
            }
        }

        if(wordDict.empty()){
            return true;
        }

        return false;
    }
};

// Using DP 
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        int n = s.size();
        vector<bool> dp(n + 1, false);
        dp[0] = true; // dp[i] means s[0...i-1] can be segmented into words in the dictionary
        
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (dp[j] && dict.count(s.substr(j, i - j))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[n];
    }
};

// Or use Trie 
class TrieNode {
public:
    char character;
    TrieNode* children[26];
    bool isEndOfWord;

    TrieNode(char c) {
        character = c;
        for (int i = 0; i < 26; i++) children[i] = nullptr;
        isEndOfWord = false;
    }
};

class Solution {
public:
    TrieNode* root;

    Solution() {
        root = new TrieNode('\0');
    }

    void insertWord(TrieNode* root, const string& word) {
        TrieNode* currentNode = root;
        for (char c : word) {
            int index = c - 'a';
            if (currentNode->children[index] == nullptr) {
                currentNode->children[index] = new TrieNode(c);
            }
            currentNode = currentNode->children[index];
        }
        currentNode->isEndOfWord = true;
    }

    bool canSegmentString(TrieNode* root, const string& s, int start, vector<int>& memo) {
        if (start == s.size()) return true; 

        if (memo[start] != -1) return memo[start]; 

        TrieNode* currentNode = root;
        for (int i = start; i < s.size(); ++i) {
            int index = s[i] - 'a';
            if (currentNode->children[index] == nullptr) {
                memo[start] = 0;
                return false; 
            }
            currentNode = currentNode->children[index];
            if (currentNode->isEndOfWord && canSegmentString(root, s, i + 1, memo)) {
                memo[start] = 1;
                return true;
            }
        }
        memo[start] = 0; 
        return false;
    }

    bool wordBreak(string s, vector<string>& wordDict) {
        for (const string& word : wordDict) {
            insertWord(root, word); 
        }
        vector<int> memo(s.size(), -1);
        return canSegmentString(root, s, 0, memo);
    }
};
