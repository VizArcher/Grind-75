// Pacific Atlantic Water Flow : TC -> O(m x n) : SC -> O(m x n) : Basically dfs with visited array
class Solution {
private:
    int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& ocean, int i, int j) {
        int m = heights.size();
        int n = heights[0].size();
        ocean[i][j] = true;

        for(auto dir : directions) {
            int ni = i + dir[0];
            int nj = j + dir[1];

            if (ni >= 0 && ni < m && nj >= 0 && nj < n && 
                !ocean[ni][nj] && heights[ni][nj] >= heights[i][j]) {
                    dfs(heights, ocean, ni, nj);
            }
        }
    }
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        if (heights.empty()) return {};

        int m = heights.size();
        int n = heights[0].size();
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        vector<vector<int>> result;

        for(int i = 0; i < m; i++) {
            dfs(heights, pacific, i, 0); // Left Column
            dfs(heights, atlantic, i, n - 1); // Right Column
        }

        for(int j = 0; j < n; j++) {
            dfs(heights, pacific, 0, j); // Top Row
            dfs(heights, atlantic, m - 1, j); // Bottom row
        }

        // Collect cells  that can reach both oceans
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    result.push_back({i , j});
                }
            }
        }

        return result;
    }
};
