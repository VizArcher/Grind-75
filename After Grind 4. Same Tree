// Incorrect Solution - 
class Solution {
private:
    void preorder(TreeNode* root, vector<int>& res) {
        if(root == NULL)
            return;

        res.push_back(root -> val);
        preorder(root->left, res);
        preorder(root->right, res);
    }
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        vector<int> TreeP;
        vector<int> TreeQ;

        if(p == NULL && q == NULL)
            return true;
        
        if(p == NULL || q == NULL)
            return false;

        preorder(p, TreeP);
        preorder(q, TreeQ);

        if(TreeP == TreeQ)
            return true;
        
        return false;
    }
};

// Correct solutiion || TC -> O(n) || SC -> O(height of tree)
class Solution {
    public:
     bool isSameTree(TreeNode *p, TreeNode *q) {
        
        if (p == NULL && q == NULL) {
            return true;
        }
        
        if (p == NULL || q == NULL || p->val != q->val) {
            return false;
        }
       
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};
